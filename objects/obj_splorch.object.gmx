<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mask_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, j;
z = 0
xspeed = 0
yspeed = 0
height = 16
chase = 0
spd = 0.5
hp = 0
atk = 5
def = 0
weakstomp = 0
weakfire = 0
weakstone = 0
tex = background_get_texture(tex_splorch)
alarm[0] = 1
alarm[1] = 15
rot = ds_grid_create(3, 3)
for (i = 0; i &lt; 3; i += 1)
{
    for (j = 0; j &lt; 3; j += 1)
    {
        if (i == j)
            ds_grid_set(rot, i, j, 1)
        else
            ds_grid_set(rot, i, j, 0)
    }
}
add = ds_list_create()
ds_list_add(add, 0)
ds_list_add(add, 0)
ds_list_add(add, 0)
angles = ds_list_create()
ds_list_add(angles, 0)
ds_list_add(angles, 0)
ds_list_add(angles, 0)
global.axis_x = ds_list_create()
ds_list_add(global.axis_x, 1)
ds_list_add(global.axis_x, 0)
ds_list_add(global.axis_x, 0)
global.axis_y = ds_list_create()
ds_list_add(global.axis_y, 0)
ds_list_add(global.axis_y, 1)
ds_list_add(global.axis_y, 0)
global.axis_z = ds_list_create()
ds_list_add(global.axis_z, 0)
ds_list_add(global.axis_z, 0)
ds_list_add(global.axis_z, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
alarm[1] = 15
ID = instance_create((x + (random_range(-8, 8))), (y + (random_range(-8, 8))), obj_splorch_stain)
ID.z = zfloor
ID.maxscale = 0.5 + random(1.5)
ID.hue = 20 + random(20)
ID.decr = ID.hue / 80
ID.offset = 0.05 + random(0.125)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = (instance_place(x, y, par_floor)).z
zfloor = z
zprev = z
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tdir, ID;
chaseprev = chase
chase = 0
if instance_exists(obj_mario)
{
    if (!obj_mario.underground)
        chase = 1
}
if chase
{
    tdir = point_direction(x, y, obj_mario.x, obj_mario.y)
    xspeed += lengthdir_x(0.05, tdir)
    yspeed += lengthdir_y(0.05, tdir)
    if (point_distance(0, 0, xspeed, yspeed) &gt; spd)
    {
        tdir = point_direction(0, 0, xspeed, yspeed)
        xspeed = lengthdir_x(spd, tdir)
        yspeed = lengthdir_y(spd, tdir)
    }
}
if ((!(wall_detect((x + xspeed), y))) &amp;&amp; (!(pit_detect_platform((x + sign(xspeed) * 16), y))))
    x += xspeed
else if (!chase)
    xspeed *= -1
else
    xspeed = 0
if ((!(wall_detect(x, (y + yspeed)))) &amp;&amp; (!(pit_detect_platform(x, (y + sign(yspeed) * 16)))))
    y += yspeed
else
    yspeed = 0
if (!(place_meeting(x, y, obj_koopa_shell)))
    cangethit = 1
if (xspeed != 0 || yspeed != 0)
{
    ds_list_replace(add, 0, ((-yspeed) / (point_distance(0, 0, xspeed, yspeed))))
    ds_list_replace(add, 1, (xspeed / (point_distance(0, 0, xspeed, yspeed))))
    ds_list_replace(add, 2, 0)
    rot = matrix_rotate(rot, add, ((point_distance(0, 0, xspeed, yspeed)) / 10))
    matrix_zyz(rot, angles)
}
if place_meeting(x, y, obj_sp_0)
{
    ID = instance_find_top(x, y, obj_sp_0)
    z = ID.z + (max(0, ID.zspeed))
    zfloor = ID.z + (max(0, ID.zspeed))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(make_color_rgb(255, 119, 4))
d3d_draw_ellipsoid((x - 14), (y - 14), (z + 28), (x + 14), (y + 14), z, -1, 1, 1, 12)
draw_set_color(c_white)
d3d_transform_set_identity()
d3d_transform_add_rotation_z(ds_list_find_value(angles, 0))
d3d_transform_add_rotation_y(ds_list_find_value(angles, 1))
d3d_transform_add_rotation_z(ds_list_find_value(angles, 2))
d3d_transform_add_translation(x, y, (z + 14))
d3d_draw_floor(-12, -12, 14, 12, 12, 14, tex, 1, 1)
d3d_transform_set_identity()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
