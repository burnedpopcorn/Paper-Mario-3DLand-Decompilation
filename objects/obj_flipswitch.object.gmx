<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_floor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = -128
xspeed = 0
yspeed = 0
destzz = -128
height = 4
activated = 0
phase = 0
solved = 0
floating = 0
myfloor = -4
tex = sprite_get_texture(tex_flipswitch, 0)
tex2 = background_get_texture(tex_cardboard_single)
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tex = sprite_get_texture(tex_flipswitch, 2)
solved = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = instance_place(x, y, obj_bottomsetter)
if ID
{
    z = ID.bottom
    floating = 1
    myfloor = instance_create(x, y, obj_floor_0)
    myfloor.z = z
    myfloor.visible = false
    with (myfloor)
        event_user(0)
}
else
    z = (instance_place(x, y, par_floor)).z
zz = z
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = instance_place(x, y, obj_arrow_up)
if ID
{
    if (x == ID.x &amp;&amp; y == ID.y)
    {
        xspeed = ID.xdir
        yspeed = ID.ydir
    }
}
if (myfloor != noone)
{
    myfloor.x = x
    myfloor.y = y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID, col, destzzprev;
x += xspeed
y += yspeed
if place_meeting(x, y, obj_mario)
{
    if (obj_mario.ground &amp;&amp; obj_mario.z == z)
    {
        ID = instance_place(x, y, obj_mario)
        with (ID)
        {
            if (!(wall_detect((x + other.xspeed), y)))
                x += other.xspeed
            if (!(wall_detect(x, (y + other.yspeed))))
                y += other.yspeed
        }
    }
}
col = 0
if place_meeting(x, y, obj_mario)
{
    if (obj_mario.z &lt;= (zz + height))
        col = 1
}
destzzprev = destzz
destzz = z - (height - 0.1) * (col || solved)
if (phase == 0)
{
    if (destzz &lt; z &amp;&amp; destzzprev == z)
    {
        activated = (!activated)
        if activated
            play_sfx(sfx_activate)
        else
            play_sfx(sfx_deactivate)
        tex = sprite_get_texture(tex_flipswitch, activated)
        if activated
        {
            with (instance_place(x, y, obj_flipswitch_area))
                event_user(0)
        }
    }
}
if (zz != destzz)
    zz += ((destzz - zz) * 0.2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (point_distance(x, y, obj_cam.x, obj_cam.y) &lt; 480)
{
    d3d_draw_floor(x, y, (zz + height), (x + 48), (y + 48), (zz + height), tex, 1, 1)
    d3d_draw_wall(x, y, (zz + height), x, (y + 48), zz, tex2, 4, 1)
    d3d_draw_wall(x, (y + 48), (zz + height), (x + 48), (y + 48), zz, tex2, 4, 1)
    d3d_draw_wall((x + 48), (y + 48), (zz + height), (x + 48), y, zz, tex2, 4, 1)
    if floating
    {
        draw_set_color(c_silver)
        d3d_set_lighting(1)
        d3d_light_define_direction(0, -1.5, -1, 2.5, 16777215)
        d3d_light_define_direction(1, 1.5, -1, -2.5, 16777215)
        d3d_light_enable(0, 1)
        d3d_light_enable(1, 1)
        d3d_draw_block((x - 1), (y - 1), (z - 0.1), (x + 49), (y + 49), (z - height), -1, 1, 1)
        d3d_light_enable(0, 0)
        d3d_light_enable(1, 0)
        d3d_set_lighting(0)
        draw_set_color(c_white)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
