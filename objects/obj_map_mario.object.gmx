<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mask_16x16</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
switch global.Powerup
{
    case 0:
        tx_mario = 36
        tx_mario_back = 38
        tx_mario_start = 41
        break
    case 1:
        tx_mario = 42
        tx_mario_back = 44
        tx_mario_start = 46
        break
    case 2:
        tx_mario = 47
        tx_mario_back = 49
        tx_mario_start = 51
        break
    case 3:
        tx_mario = 52
        tx_mario_back = 54
        tx_mario_start = 56
        break
    case 4:
        tx_mario = 57
        tx_mario_back = 60
        tx_mario_start = 62
        break
}

z = 0
zfloor = 0
xspeed = 0
yspeed = 0
xscale = 1
angle = 0
index = 0
move = 1
step = 0
scale = 0
tex = tx_mario
tex2 = 161
tex3 = sprite_get_texture(tex_speechbubble, 0)
xx = x + 8
yy = y + 8
instance_create(0, 0, obj_map_cam)
instance_create(0, 0, obj_map_hud)
instance_create(0, 0, obj_fade_in)
if (global.Mapx != -1)
{
    x = global.Mapx
    y = global.Mapy
}
for (i = 0; i &lt; 3; i += 1)
    greenstars[i] = 0
stars = -1
global.Split = 0
save_game()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID, ID2, i;
if (xspeed &lt; 0)
    xscale = -1
if (xspeed &gt; 0)
    xscale = 1
if (angle != 180 &amp;&amp; xscale == -1)
    angle += 9
if (angle != 0 &amp;&amp; xscale == 1)
    angle -= 9
destz = 0 + 4 * (place_meeting(x, y, obj_level_dot))
if (z != destz)
    z += sign(destz - z)
zfloor = z
obj_map_hud.show = 0
ID = instance_place(x, y, obj_level_dot)
if (ID &amp;&amp; move)
{
    if (x == ID.x &amp;&amp; y == ID.y)
    {
        if (key_check_pressed(global.Key_left) &amp;&amp; (!(place_meeting((x - 1), y, obj_map_block))))
        {
            xspeed = -1
            yspeed = 0
            step = 12
        }
        else if (key_check_pressed(global.Key_right) &amp;&amp; (!(place_meeting((x + 1), y, obj_map_block))))
        {
            xspeed = 1
            yspeed = 0
            step = 12
        }
        else if (key_check_pressed(global.Key_up) &amp;&amp; (!(place_meeting(x, (y - 1), obj_map_block))))
        {
            yspeed = -1
            xspeed = 0
            step = 12
        }
        else if (key_check_pressed(global.Key_down) &amp;&amp; (!(place_meeting(x, (y + 1), obj_map_block))))
        {
            yspeed = 1
            xspeed = 0
            step = 12
        }
        else if (xspeed != 0 || yspeed != 0)
        {
            xspeed = 0
            yspeed = 0
            save_game()
        }
        if (key_check_pressed(global.Key_jump) &amp;&amp; ID.rm != -1)
        {
            if (global.Greenstarcount &gt;= ID.stars)
            {
                xspeed = 0
                yspeed = 0
                xscale = 1
                angle = 0
                move = 0
                tex = tx_mario_start
                ID = instance_place(x, y, obj_level_dot)
                global.Cur_level = ID.level
                ID2 = instance_create(x, y, obj_fade_out)
                ID2.rm = ID.rm
                ID2.sprite = 158
                global.Mapx = x
                global.Mapy = y
                play_sfx(sfx_map_confirm)
            }
            else
                play_sfx(sfx_denied)
        }
    }
    if (ID.level != -1)
    {
        obj_map_hud.num = ID.num
        obj_map_hud.name = ID.name
        obj_map_hud.show = 1
        for (i = 0; i &lt; 3; i += 1)
            greenstars[i] = global.Greenstars[i, ID.level]
        stars = ID.stars
    }
    xx = ID.x + 8
    yy = ID.y + 8
}
if (abs(scale - obj_map_hud.show * 0.75) &gt; 0.1)
    scale += ((obj_map_hud.show * 0.75 - scale) * 0.2)
else
    scale = obj_map_hud.show * 0.75
if (sign(xspeed) != 0)
    xscale = sign(xspeed)
if (xspeed == 0 &amp;&amp; yspeed == 0)
    index = 0
if move
{
    if (yspeed &lt; 0)
        tex = tx_mario_back
    else
        tex = tx_mario
}
step += point_distance(0, 0, xspeed, yspeed)
if (step &gt; 24)
{
    step -= 24
    play_sfx(sfx_step)
}
x += xspeed
y += yspeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
index += ((point_distance(0, 0, xspeed, yspeed)) * 0.1)
d3d_transform_set_identity()
d3d_transform_add_rotation_z(angle)
d3d_transform_add_translation((x + 8), (y + 8), z)
d3d_draw_wall(-16, 0, 32, 16, 0, 0, sprite_get_texture(tex, index), 1, 1)
d3d_transform_set_identity()
d3d_transform_set_identity()
d3d_transform_add_scaling(scale, scale, scale)
d3d_transform_add_translation(xx, yy, 40)
d3d_draw_wall(-32, -1, 34, 32, -1, -30, tex3, 1, 1)
if (global.Greenstarcount &gt;= stars)
{
    for (i = 0; i &lt; 3; i += 1)
        d3d_draw_wall((-23 + 15 * i), 0, 16, (-7 + 15 * i), 0, 0, sprite_get_texture(tex2, greenstars[i]), 1, 1)
}
else
{
    d3d_draw_wall(-21, 0, 16, -5, 0, 0, sprite_get_texture(tex2, 1), 1, 1)
    d3d_transform_set_identity()
    d3d_transform_add_rotation_x(90)
    d3d_transform_add_scaling((scale * 0.5), (scale * 0.5), (scale * 0.5))
    d3d_transform_add_translation(xx, yy, 40)
    draw_set_font(fnt_nsmbu)
    draw_set_color(c_black)
    draw_set_halign(fa_right)
    draw_text(41, -30, ("x" + (string(stars - global.Greenstarcount))))
    draw_set_halign(fa_left)
    draw_set_color(c_white)
    draw_set_font(global.fnt_hud)
}
d3d_transform_set_identity()
d3d_draw_shadow(x, y, (zfloor + 0.2), (x + 16), (y + 16), (zfloor + 0.2), 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
