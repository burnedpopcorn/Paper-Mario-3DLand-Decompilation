<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mask_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var phi, r, a, b, s, t, u, i, j;
xspeed = 0
yspeed = 0
zfloor = 0
zprev = 0
scale = 0
zspeed = 3
grav = 0.125
color = 16777215
kicked = 0
bounced = 0
black_part = d3d_model_create()
white_part = d3d_model_create()
phi = (1 + sqrt(5)) / 2
r = 16
a = phi / (sqrt(phi * phi + 1))
b = 1 / (sqrt(phi * phi + 1))
for (s = -1; s &lt; 2; s += 2)
{
    for (t = -1; t &lt; 2; t += 2)
    {
        d3d_model_primitive_begin(black_part, 6)
        d3d_model_vertexx(black_part, (s * a), (t * b), 0, r)
        d3d_model_vertexx(black_part, (s * 3 * a), (t * b), 0, r)
        d3d_model_vertexx(black_part, (s * (2 * a + b)), (t * 2 * b), (s * t * (-a)), r)
        d3d_model_vertexx(black_part, (s * 2 * a), (t * (a + 2 * b)), (s * t * (-b)), r)
        d3d_model_vertexx(black_part, (s * 2 * a), (t * (a + 2 * b)), (s * t * b), r)
        d3d_model_vertexx(black_part, (s * (2 * a + b)), (t * 2 * b), (s * t * a), r)
        d3d_model_vertexx(black_part, (s * 3 * a), (t * b), 0, r)
        d3d_model_primitive_end(black_part)
        d3d_model_primitive_begin(white_part, 6)
        d3d_model_vertexx(white_part, (s * (2 * a + b)), 0, (s * t * (-a)), r)
        d3d_model_vertexx(white_part, (s * 3 * a), (t * b), 0, r)
        d3d_model_vertexx(white_part, (s * 3 * a), (t * (-b)), 0, r)
        d3d_model_vertexx(white_part, (s * (2 * a + b)), ((-t) * 2 * b), (s * t * (-a)), r)
        d3d_model_vertexx(white_part, (s * (a + 2 * b)), ((-t) * b), (s * t * -2 * a), r)
        d3d_model_vertexx(white_part, (s * (a + 2 * b)), (t * b), (s * t * -2 * a), r)
        d3d_model_vertexx(white_part, (s * (2 * a + b)), (t * 2 * b), (s * t * (-a)), r)
        d3d_model_vertexx(white_part, (s * 3 * a), (t * b), 0, r)
        d3d_model_primitive_end(white_part)
        d3d_model_primitive_begin(black_part, 6)
        d3d_model_vertexx(black_part, 0, (s * a), (t * b), r)
        d3d_model_vertexx(black_part, 0, (s * 3 * a), (t * b), r)
        d3d_model_vertexx(black_part, (s * t * (-a)), (s * (2 * a + b)), (t * 2 * b), r)
        d3d_model_vertexx(black_part, (s * t * (-b)), (s * 2 * a), (t * (a + 2 * b)), r)
        d3d_model_vertexx(black_part, (s * t * b), (s * 2 * a), (t * (a + 2 * b)), r)
        d3d_model_vertexx(black_part, (s * t * a), (s * (2 * a + b)), (t * 2 * b), r)
        d3d_model_vertexx(black_part, 0, (s * 3 * a), (t * b), r)
        d3d_model_primitive_end(black_part)
        d3d_model_primitive_begin(white_part, 6)
        d3d_model_vertexx(white_part, (s * t * (-a)), (s * (2 * a + b)), 0, r)
        d3d_model_vertexx(white_part, 0, (s * 3 * a), (t * b), r)
        d3d_model_vertexx(white_part, 0, (s * 3 * a), (t * (-b)), r)
        d3d_model_vertexx(white_part, (s * t * (-a)), (s * (2 * a + b)), ((-t) * 2 * b), r)
        d3d_model_vertexx(white_part, (s * t * -2 * a), (s * (a + 2 * b)), ((-t) * b), r)
        d3d_model_vertexx(white_part, (s * t * -2 * a), (s * (a + 2 * b)), (t * b), r)
        d3d_model_vertexx(white_part, (s * t * (-a)), (s * (2 * a + b)), (t * 2 * b), r)
        d3d_model_vertexx(white_part, 0, (s * 3 * a), (t * b), r)
        d3d_model_primitive_end(white_part)
        d3d_model_primitive_begin(black_part, 6)
        d3d_model_vertexx(black_part, (t * b), 0, (s * a), r)
        d3d_model_vertexx(black_part, (t * b), 0, (s * 3 * a), r)
        d3d_model_vertexx(black_part, (t * 2 * b), (s * t * (-a)), (s * (2 * a + b)), r)
        d3d_model_vertexx(black_part, (t * (a + 2 * b)), (s * t * (-b)), (s * 2 * a), r)
        d3d_model_vertexx(black_part, (t * (a + 2 * b)), (s * t * b), (s * 2 * a), r)
        d3d_model_vertexx(black_part, (t * 2 * b), (s * t * a), (s * (2 * a + b)), r)
        d3d_model_vertexx(black_part, (t * b), 0, (s * 3 * a), r)
        d3d_model_primitive_end(black_part)
        d3d_model_primitive_begin(white_part, 6)
        d3d_model_vertexx(white_part, 0, (s * t * (-a)), (s * (2 * a + b)), r)
        d3d_model_vertexx(white_part, (t * b), 0, (s * 3 * a), r)
        d3d_model_vertexx(white_part, (t * (-b)), 0, (s * 3 * a), r)
        d3d_model_vertexx(white_part, ((-t) * 2 * b), (s * t * (-a)), (s * (2 * a + b)), r)
        d3d_model_vertexx(white_part, ((-t) * b), (s * t * -2 * a), (s * (a + 2 * b)), r)
        d3d_model_vertexx(white_part, (t * b), (s * t * -2 * a), (s * (a + 2 * b)), r)
        d3d_model_vertexx(white_part, (t * 2 * b), (s * t * (-a)), (s * (2 * a + b)), r)
        d3d_model_vertexx(white_part, (t * b), 0, (s * 3 * a), r)
        d3d_model_primitive_end(white_part)
        for (u = -1; u &lt; 2; u += 2)
        {
            d3d_model_primitive_begin(black_part, 2)
            d3d_model_vertexx(black_part, (s * 2 * a), (t * (a + 2 * b)), (u * b), r)
            d3d_model_vertexx(black_part, (s * a), (t * (2 * a + b)), (u * 2 * b), r)
            d3d_model_vertexx(black_part, (u * b), (s * 2 * a), (t * (a + 2 * b)), r)
            d3d_model_vertexx(black_part, (u * 2 * b), (s * a), (t * (2 * a + b)), r)
            d3d_model_vertexx(black_part, (t * (a + 2 * b)), (u * b), (s * 2 * a), r)
            d3d_model_vertexx(black_part, (t * (2 * a + b)), (u * 2 * b), (s * a), r)
            d3d_model_primitive_end(black_part)
        }
        d3d_model_primitive_begin(white_part, 6)
        d3d_model_vertexx(white_part, s, t, (s * t), r)
        d3d_model_vertexx(white_part, (s * (2 * a + b)), (t * 2 * b), (s * t * a), r)
        d3d_model_vertexx(white_part, (s * 2 * a), (t * (a + 2 * b)), (s * t * b), r)
        d3d_model_vertexx(white_part, (s * a), (t * (2 * a + b)), (s * t * 2 * b), r)
        d3d_model_vertexx(white_part, (s * b), (t * 2 * a), (s * t * (a + 2 * b)), r)
        d3d_model_vertexx(white_part, (s * 2 * b), (t * a), (s * t * (2 * a + b)), r)
        d3d_model_vertexx(white_part, (s * (a + 2 * b)), (t * b), (s * t * 2 * a), r)
        d3d_model_vertexx(white_part, (s * (2 * a + b)), (t * 2 * b), (s * t * a), r)
        d3d_model_primitive_end(white_part)
        d3d_model_primitive_begin(white_part, 6)
        d3d_model_vertexx(white_part, s, t, ((-s) * t), r)
        d3d_model_vertexx(white_part, (s * (2 * a + b)), (t * 2 * b), ((-s) * t * a), r)
        d3d_model_vertexx(white_part, (s * (a + 2 * b)), (t * b), ((-s) * t * 2 * a), r)
        d3d_model_vertexx(white_part, (s * 2 * b), (t * a), ((-s) * t * (2 * a + b)), r)
        d3d_model_vertexx(white_part, (s * b), (t * 2 * a), ((-s) * t * (a + 2 * b)), r)
        d3d_model_vertexx(white_part, (s * a), (t * (2 * a + b)), ((-s) * t * 2 * b), r)
        d3d_model_vertexx(white_part, (s * 2 * a), (t * (a + 2 * b)), ((-s) * t * b), r)
        d3d_model_vertexx(white_part, (s * (2 * a + b)), (t * 2 * b), ((-s) * t * a), r)
        d3d_model_primitive_end(white_part)
    }
    d3d_model_primitive_begin(black_part, 2)
    d3d_model_vertexx(black_part, (s * 3 * a), b, 0, r)
    d3d_model_vertexx(black_part, (s * 3 * a), (-b), 0, r)
    d3d_model_vertexx(black_part, 0, (s * 3 * a), b, r)
    d3d_model_vertexx(black_part, 0, (s * 3 * a), (-b), r)
    d3d_model_vertexx(black_part, b, 0, (s * 3 * a), r)
    d3d_model_vertexx(black_part, (-b), 0, (s * 3 * a), r)
    d3d_model_primitive_end(black_part)
}
rot = ds_grid_create(3, 3)
for (i = 0; i &lt; 3; i += 1)
{
    for (j = 0; j &lt; 3; j += 1)
    {
        if (i == j)
            ds_grid_set(rot, i, j, 1)
        else
            ds_grid_set(rot, i, j, 0)
    }
}
add = ds_list_create()
ds_list_add(add, 0)
ds_list_add(add, 0)
ds_list_add(add, 0)
angles = ds_list_create()
ds_list_add(angles, 0)
ds_list_add(angles, 0)
ds_list_add(angles, 0)
global.axis_x = ds_list_create()
ds_list_add(global.axis_x, 1)
ds_list_add(global.axis_x, 0)
ds_list_add(global.axis_x, 0)
global.axis_y = ds_list_create()
ds_list_add(global.axis_y, 0)
ds_list_add(global.axis_y, 1)
ds_list_add(global.axis_y, 0)
global.axis_z = ds_list_create()
ds_list_add(global.axis_z, 0)
ds_list_add(global.axis_z, 0)
ds_list_add(global.axis_z, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = instance_create(x, y, obj_explosion)
ID.z = z + 16
play_sfx(sfx_bomb)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (color == 255)
    color = 16777215
else
    color = 255
alarm[0] = 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>find_zfloor()
if (z &lt; zfloor)
{
    if kicked
    {
        if bounced
            instance_destroy()
        else
        {
            z = zfloor
            zspeed = 2
            grav = 0
            bounced = 1
            play_sfx(sfx_bump)
        }
    }
    else
    {
        z = zfloor
        zspeed = 0
        grav = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tdir;
if (scale &lt; 1)
    scale += 0.03
x += xspeed
y += yspeed
zprev = z
z += zspeed
zspeed -= grav
if (place_meeting(x, y, obj_mario) &amp;&amp; (!kicked))
{
    if (obj_mario.z &lt; (z + 32))
    {
        kicked = 1
        tdir = point_direction(obj_mario.x, obj_mario.y, x, y)
        xspeed = lengthdir_x(2, tdir)
        yspeed = lengthdir_y(2, tdir)
        zspeed = 3
        grav = 0.125
        color = 255
        play_sfx(sfx_stomp)
        alarm[0] = 5
    }
}
if (xspeed != 0 || yspeed != 0)
{
    ds_list_replace(add, 0, ((-yspeed) / (point_distance(0, 0, xspeed, yspeed))))
    ds_list_replace(add, 1, (xspeed / (point_distance(0, 0, xspeed, yspeed))))
    ds_list_replace(add, 2, 0)
    rot = matrix_rotate(rot, add, ((point_distance(0, 0, xspeed, yspeed)) / 10))
    matrix_zyz(rot, angles)
}
if (place_meeting(x, y, obj_mole_bowser) &amp;&amp; kicked)
{
    if (z &lt; (obj_mole_bowser.z + obj_mole_bowser.height))
        instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_transform_set_identity()
d3d_transform_add_scaling(scale, scale, scale)
d3d_transform_add_rotation_z(ds_list_find_value(angles, 0))
d3d_transform_add_rotation_y(ds_list_find_value(angles, 1))
d3d_transform_add_rotation_z(ds_list_find_value(angles, 2))
d3d_transform_add_translation(x, y, (z + 16))
draw_set_color(c_black)
d3d_model_draw(black_part, 0, 0, 0, -1)
draw_set_color(color)
d3d_model_draw(white_part, 0, 0, 0, -1)
d3d_transform_set_identity()
d3d_draw_shadow((x - 16 * scale), (y - 16 * scale), (zfloor + 0.02), (x + 16 * scale), (y + 16 * scale), (zfloor + 0.02), 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
