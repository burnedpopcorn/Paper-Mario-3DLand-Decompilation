<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mask_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_hurt</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
event_inherited()
xrot = 0
zrot = 0
zspeed = 2
grav = 0.125
height = 4
atk = 5
phase = 0
xspeed = 0
yspeed = 0
zfloor = 0
timer_vis = 10
myplatform = -4
occupied = 0
acc = 0.05
tex = sprite_get_texture(tex_razor, 0)
tex2 = background_get_texture(tex_cardboard)
tex3 = sprite_get_texture(tex_razor, 1)
model = d3d_model_create()
d3d_model_primitive_begin(model, 5)
for (i = 0; i &lt; 9; i += 1)
{
    d3d_model_vertex_texture(model, lengthdir_x(12, (22.5 + 45 * i)), ((-height) * 0.5), lengthdir_y(12, (22.5 + 45 * i)), (0.1 * i), 0)
    d3d_model_vertex_texture(model, lengthdir_x(12, (22.5 + 45 * i)), (height * 0.5), lengthdir_y(12, (22.5 + 45 * i)), (0.1 * i), 1)
    d3d_model_vertex_texture(model, lengthdir_x(12, (67.5 + 45 * i)), ((-height) * 0.5), lengthdir_y(12, (67.5 + 45 * i)), (0.1 + 0.1 * i), 0)
    d3d_model_vertex_texture(model, lengthdir_x(12, (67.5 + 45 * i)), (height * 0.5), lengthdir_y(12, (67.5 + 45 * i)), (0.1 + 0.1 * i), 1)
}
d3d_model_primitive_end(model)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = instance_create(x, y, obj_fx)
ID.z = z + height * 0.5
ID.tex = 152
ID.imgspd = 0.25
with (ID)
    event_user(0)
if instance_exists(myplatform)
{
    with (myplatform)
        instance_destroy()
}
obj_mario.move = 1
obj_mario.doalign = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = (!visible)
alarm[0] = 5
timer_vis -= 1
if (timer_vis &lt;= 0)
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tdist, tdir;
if (z &lt; zfloor)
{
    z = zfloor
    zspeed = 0
    grav = 0
    if (phase == 0)
        phase = 1
    if (phase == 2)
    {
        myplatform = instance_create(x, y, obj_platform_0)
        myplatform.sprite_index = sprite_index
        myplatform.visible = false
        myplatform.z = z + height
    }
}
if instance_exists(myplatform)
{
    myplatform.x = x
    myplatform.y = y
    myplatform.z = z + height
    myplatform.xspeed = xspeed
    myplatform.yspeed = yspeed
}
occupiedprev = occupied
occupied = 0
if place_meeting(x, y, obj_mario)
{
    if ((obj_mario.z == (z + height) &amp;&amp; obj_mario.move) || occupiedprev)
    {
        obj_mario.x = x
        obj_mario.y = y
        obj_mario.z = z + height
        occupied = 1
        if obj_mario.move
        {
            with (obj_mario)
            {
                move = 0
                if (global.Powerup == 0)
                    tex = 36
                if (global.Powerup == 1)
                    tex = 42
                if (global.Powerup == 2)
                    tex = 47
                if (global.Powerup == 3)
                    tex = 52
                index = 0
                doalign = 1
            }
        }
        if key_check(global.Key_left)
            xspeed -= acc
        if key_check(global.Key_right)
            xspeed += acc
        if key_check(global.Key_up)
            yspeed -= acc
        if key_check(global.Key_down)
            yspeed += acc
        if (key_check_pressed(global.Key_jump) &amp;&amp; z == zfloor)
        {
            zspeed = 3
            grav = 0.125
            play_sfx(sfx_grinder_jump)
        }
        tdist = point_distance(0, 0, xspeed, yspeed)
        if (tdist &gt; 2)
        {
            tdir = point_direction(0, 0, xspeed, yspeed)
            xspeed = lengthdir_x(2, tdir)
            yspeed = lengthdir_y(2, tdir)
        }
        if ((!key_check(global.Key_left)) &amp;&amp; (!key_check(global.Key_right)))
            xspeed *= 0.95
        if ((!key_check(global.Key_up)) &amp;&amp; (!key_check(global.Key_down)))
            yspeed *= 0.95
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID, tdir;
ID = instance_place((x + xspeed), (y + yspeed), obj_razor)
if ID
{
    tdir = point_direction(ID.x, ID.y, x, y)
    xspeed = lengthdir_x(2, tdir)
    yspeed = lengthdir_y(2, tdir)
}
if wall_detect((x + xspeed), y)
    xspeed *= -1
if wall_detect(x, (y + yspeed))
    yspeed *= -1
x += xspeed
y += yspeed
z += zspeed
zspeed -= grav
zrot += point_distance(0, 0, xspeed, yspeed)
if (xrot &lt; 270)
    xrot += 7.5
if (phase == 2 &amp;&amp; xrot &lt; 450)
    xrot += 7.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_transform_set_identity()
d3d_transform_add_rotation_y(zrot)
d3d_transform_add_rotation_x(xrot)
d3d_transform_add_translation(x, y, (z + height * 0.5 + 1))
d3d_draw_wall(-16, (height * 0.5), 16, 16, (height * 0.5), -16, tex, 1, 1)
d3d_model_draw(model, 0, 0, 0, tex2)
d3d_draw_wall(-16, ((-height) * 0.5), 16, 16, ((-height) * 0.5), -16, tex3, 1, 1)
d3d_transform_set_identity()
d3d_transform_add_rotation_x(90)
d3d_transform_add_rotation_y(zrot)
d3d_transform_add_rotation_x(xrot)
d3d_transform_add_translation(x, y, (z + height * 0.5 + 1))
draw_set_color(make_color_rgb(155, 154, 165))
d3d_draw_cone(-5, -5, (height * 0.5), 5, 5, (height * 0.5 + 4), -1, 1, 1, 0, 6)
draw_set_color(c_white)
d3d_transform_set_identity()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
